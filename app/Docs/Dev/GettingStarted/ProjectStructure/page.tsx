import { CustomSynxtaxHighligher } from "@/app/ui/customsyntaxhighlighter";
import InlineCodeSnip from "@/app/ui/inlinecodesnip";
import PageContents, { CSFragment } from "@/app/ui/pagecontents";
import SyntaxHighlighter from "react-syntax-highlighter";

// `}<InlineCodeSnip>{``}</InlineCodeSnip>{` 
const prodDirectory = "MultithreadAlgo/bin/Debug/net7.0/win-x64/"


export default function Page () {

    return (
        <>
            <PageContents id="page-contents">
                <CSFragment content="Critical Components" link="critical-components"/>
                <CSFragment content="Directories" link="directories"/>
                <CSFragment content="/AdditionalTestData (Deprecated)" link="test-data" isLevel2={true}/>
                <CSFragment content="/ADIBase" link="adi-base" isLevel2={true}/>
                <CSFragment content="/DRT (Empty)" link="drt" isLevel2={true}/>
                <CSFragment content="/DVA " link="dva" isLevel2={true}/>
                <CSFragment content="/GoogleRequests" link="google-requests" isLevel2={true}/>
                <CSFragment content="/ODICommands" link="odi-commands" isLevel2={true}/>
                <CSFragment content="Back to top" link="/"/>
            </PageContents>
            <article className="mt-4 w-full min-w-0 max-w-6x1 px-2 md:px-6 min-height-[calc(-103px + 100vh)]">
                <div className="-mt-4 mb-7 md:mb-10 md:mt-2">
                {/* TODO: Make a page pass which links current chapter > chapter section > section page */}
                </div>
                <div className="prose prose-documentation max-w-none scroll-smooth">
                    <div className="h-[15px]">{``}</div>
                    <h1 className="break-words">{`Project Structure`}</h1>
                    <p>{`The ADI project structure is expressed across a .NET 7 project layout. Code is stored within the `}<InlineCodeSnip>{`src`}</InlineCodeSnip>{` directory, compiled binaries can be found in the `}<InlineCodeSnip>{`bin`}</InlineCodeSnip>{` directory, and there are other directories generated by Visual Studio for use within the development environment. It is important to note that root directory of development is different for the root directory for application builds.`}</p>
                    <p>{`In this documentation, whenever the term root directory is used in the context of production, it is referring to the folder: `}</p>
                    <CustomSynxtaxHighligher language="Cplusplus" code={prodDirectory}/>
                    <p>{`It may be the case that the project dll will be stored in a separate folder from the one above, though this is dependent on Visual Studio build setting configuration. Whenever the program is built (for release or debug), Visual Studio will generate sub-folders within the `}<InlineCodeSnip>{`bin`}</InlineCodeSnip>{` folder, based on the build settings. When publishing, the project publish profile targeted `}<InlineCodeSnip>{`net7.0`}</InlineCodeSnip>{` , had deployment-mode set to `}<InlineCodeSnip>{`Self-contained`}</InlineCodeSnip>{` with the target runtime set to `}<InlineCodeSnip>{`win-x64`}</InlineCodeSnip>{`. (This should be customisable in Visual Studio by right-clicking on the project and clicking "Publish").`}
                    </p>
                    <p>{`It is recommended that a similar profile is set for future development, and this will generate a similar binary folder structure during build time, where each separate build is distinguished by sub-directories of the binary folder. It is important to note for testing ADI generated log files in production that each separate build has it's own `}<InlineCodeSnip>{`logs`}</InlineCodeSnip>{` folder, so be sure to confirm which version of the project was built (usually debug or release) when searching log files.`}
                    </p>
                    <p>{`The published build (not release build) will preside in a folder designated by the developer, and the log folder will be in the highest (root) directory of the project.`}</p>
                    <h2 id="critical-components">{`Critical Components`}</h2>
                    <p>{`The ADI project's external critical components (for DVA functionality) are:`}</p>
                    <ul className="list-disc ml-4">
                        <li className="pb-2">
                            {``}<InlineCodeSnip>{`Selenium ChromeDriver`}</InlineCodeSnip>{`, is used to login to each DVA account by simulating browser actions, and then searching DVA's Transport database for the agent's requested order number. If a booking is found, the Chrome Driver will select and scrape the booking data into a serializable format, before processing the booking details and submitting it to the 13cabs dispatch booking server.`}
                        </li>
                        <li className="pb-2">
                            {``}<InlineCodeSnip>{`BCCSVR SQL Server`}</InlineCodeSnip>{` is the server which allows the application to find a fleet based on a provided suburb and postcode. By limiting an SQL query to include a specific state, postcode and suburb name combination, this server is able to consistently provide the fleet required for booking submissions almost every time. In addition to this, the agent is given a choice between multiple options if ADI cannot reduce the possible choices down to a single choice.`}
                        </li>
                        <li className="pb-2">
                            {`The `}<InlineCodeSnip>{`ODI Servers`}</InlineCodeSnip>{` are responsible for providing and responding to SOAP requests which the ADI project makes throughout the booking process. The three servers used for SOAP messages are   `}<InlineCodeSnip>{`azsvr09`}</InlineCodeSnip>{` (Victoria), `}<InlineCodeSnip>{`azsvr10`}</InlineCodeSnip>{` (New South Wales) and `}<InlineCodeSnip>{`azsvr11`}</InlineCodeSnip>{` (Queensland). The SOAP requests are responsible for submitting bookings for dispatch, receiving booking numbers, sending logs of which agent submitted a given booking and is used as a back-up to search for address details based on the street required if none can be found normally. The server first sends and receives and authentication code (a separate code is used per server), and this authentication code is required for any other SOAP request. It is important to note that the fleets available to ADI are defined on the `}<InlineCodeSnip>{`GenesisIvr`}</InlineCodeSnip>{` channel, and that any new fleets must be enabled on this channel to be used in the project.`}
                        </li>
                        <li className="pb-2">
                            {``}<InlineCodeSnip>{`Google Maps API`}</InlineCodeSnip>{` is primarily repsonsible for locating the latitude and longitude of bookings for plotting pickup and destination locations, and the distance matrix API is also used to determine the estimated time of travel, which helps calculate a pickup time if one hasn't been found in the booking instructions.`}
                        </li>
                    </ul>
                    <br/>
                    <h1 id="directories">{`Directories`}</h1>
                    <p className="ml-4">{`The ADI project has separation of concerns distinguished in each code folder:`}</p>
                    <h2 id="test-data">{`/AdditionalTestData`}{` (Deprecated)`}</h2>
                    <p>{`This folder was initially used for hosting mockup data files for the project, though is currently not being used for mock data. The folder has methods that will generate a large list of suburb real suburb names and post codes to suburb lookup algorithms used across the project. This folder can be ignored.`}</p>
                    <h2 id="adi-base">{`/ADIBase`}</h2>
                    <p>{`The ADI base folder contains the primary, generic functionality of the ADI project. ADI base features abstract classes and interfaces, as well as utility methods and functionality which are used across the entire project. `}</p>
                    <p><InlineCodeSnip>{`BookingRedux.cs`}</InlineCodeSnip>{` is the basis of booking generation for the project, it contains the central `}<InlineCodeSnip>{`BookingInfo`}</InlineCodeSnip>{` and `}<InlineCodeSnip>{`BookingRedux`}</InlineCodeSnip>{` classes, which are critical for booking generation, as well as the `}<InlineCodeSnip>{`TravelPoint`}</InlineCodeSnip>{` class, which is inherited by the `}<InlineCodeSnip>{`Destination`}</InlineCodeSnip>{` and `}<InlineCodeSnip>{`Pickup`}</InlineCodeSnip>{` classes respectively. This file is essentially the hub from which any of the booking-based classes are defined. In addition, this file hosts the `}<InlineCodeSnip>{`A2BSQLServerQueryBuilder`}</InlineCodeSnip>{` class used for finding fleets with a given address. It is recommended to become familiar with the `}<InlineCodeSnip>{`Bookinginfo`}</InlineCodeSnip>{` class, since it hosts a wealth of project functionality.`}</p>
                    <p>{``}<InlineCodeSnip>{`Contexts.cs`}</InlineCodeSnip>{` contains the definition of the `}<InlineCodeSnip>{`Fleets`}</InlineCodeSnip>{` class which defines any valid Fleet to send a booking to. If any fleets need to be added to the project, simply add their definition in a new static method within the list, add it to the appropriate list in `}<InlineCodeSnip>{`FleetBank`}</InlineCodeSnip>{` ,`}<InlineCodeSnip>{`GetFleetByID`}</InlineCodeSnip>{` switch statement, and then go to `}<InlineCodeSnip>{`BookingRedux.cs`}</InlineCodeSnip>{` and add the Fleet ID to the method `}<InlineCodeSnip>{`FindFleetIDsByState`}</InlineCodeSnip>{` and any database IDs to `}<InlineCodeSnip>{`FindFleetIDsByState`}</InlineCodeSnip>{`.
                     `}</p>
                    <p>{``}<InlineCodeSnip>{`MenuManagement.cs`}</InlineCodeSnip>{` is used for console menu navigation. This class defines several classes and functions for different terminal modes (only the DVA terminal mode is supported at this time). The following `}<InlineCodeSnip>{`Menu`}</InlineCodeSnip>{` items have been defined: `}<InlineCodeSnip>{`StartingMenu`}</InlineCodeSnip>{`, `}<InlineCodeSnip>{`DVAStarterMenu`}</InlineCodeSnip>{`, `}<InlineCodeSnip>{`DVAActivatedMenu`}</InlineCodeSnip>{`, `}<InlineCodeSnip>{`DVALoggedIn`}</InlineCodeSnip>{`. The `}<InlineCodeSnip>{`MenuFunction`}</InlineCodeSnip>{` class is derived for each Menu option, with some being defined in this file, such as `}<InlineCodeSnip>{`LoginDVA`}</InlineCodeSnip>{`, `}<InlineCodeSnip>{`StartDVA`}</InlineCodeSnip>{` and so on. ADI's menu system is fairly intuitive, and described on it's own page later in this documentation. 
                    `}</p>
                    <p>{``}<InlineCodeSnip>{`SOAPRequest.cs`}</InlineCodeSnip>{` defines the `}<InlineCodeSnip>{`SOAPRequest`}</InlineCodeSnip>{`class used to define abstract basis of requests submitted to and received from the 13cabs dispatch booking servers. In addition to this, this file defines the `}<InlineCodeSnip>{`ODIServer`}</InlineCodeSnip>{` class which loads the `}<InlineCodeSnip>{`ODIKey`}</InlineCodeSnip>{`s from the environment variables, and allows for the different servers to be used interchangeably. This class should only be inherited by classes intended to use new ODI functions, but should not be used otherwise. `}</p>
                    <p>{``}<InlineCodeSnip>{`SQL_ADI_Resources.cs`}</InlineCodeSnip>{` (Unused) was developed with the intent of working alongside a custom SQL server which had all necessary fleet data, with the intent of simplifying fleet inclusions for future work, though the functionality was not able to be completed. This file can largely be ignored.`}</p>

                    <p>{` `}<InlineCodeSnip>{`StreetFindingStrategy.cs`}</InlineCodeSnip>{` (Deprecated) was used to find streets by sending SOAP requests to the ODI server, and features several strategies for finding a street address this way. These strategies are now only used as a backup to the predominant strategy of using Google Maps API to lookup the suburb and then retrieve a latitude and longitude object before submitting a booking with a LatLong object representing pickup and destination, and then forcing the address for dispatch.`}</p>

                    <p>{` `}<InlineCodeSnip>{`StreetSuffix.cs`}</InlineCodeSnip>{` is used to confirm in deprecated functionality whether the supplied address conforms to an appropriate street suffix (e.g. Road, or "Rd") before trying to find the address. While this feature is used to validate the address at the end of the booking process to submit the street string for a given travel point, it is not used at any other stage under normal operation, and can mostly be ignored.`}</p>
                    

                    <h2 id="drt">{`/DRT (Empty)`}</h2>
                    <p>{`DRT was the name of the service used for a booking type which was scheduled for development. Any future development for DRT-based bookings could be placed here.`}</p>


                    <h2 id="dva">{`/DVA`}</h2> 
                    <p>{`The Department of Veteran Affairs folder hosts any class primarily associated with the usage of Selenium ChromeDriver , including the  `}<InlineCodeSnip>{`CustomChromeDriver`}</InlineCodeSnip>{` which is used to manage chrome instances during the applications lifetime. This folder also defines the `}<InlineCodeSnip>{`DVABooking`}</InlineCodeSnip>{` and `}<InlineCodeSnip>{`DVABookingInfo`}</InlineCodeSnip>{` classes which define the structure and DVA Bookings and parse received text data into booking objects.`}</p>
                    <p>{``}</p>
                    <p>{` `}<InlineCodeSnip>{`/KernelUtilities`}</InlineCodeSnip>{` host a series of  `}<InlineCodeSnip>{`kernel32.dll`}</InlineCodeSnip>{` and  `}<InlineCodeSnip>{`user32.dll`}</InlineCodeSnip>{` dll imports used to manage the console during operation. These are required for the user to be able to close the console, and have the application naturally close alongside any ChromeDriver's it was attached to.`}</p>

                    <h2 id="google-requests">{`/GoogleRequests`}</h2>
                    <p>{`The files in this folder simply define the various serialisable classes used to send and receive Google API calls. `} </p>


                    <h2 id="odi-commands">{`/ODICommands`}</h2>
                    <p>{`This folder is similar to the `}<InlineCodeSnip>{`/GoogleRequests`}</InlineCodeSnip>{` directory except that it defines different API calls to the 13cabs ODI server, including authentication requests, and submitting bookings.`}</p>

                    <p>{` 

                    `}</p>
                </div>
                <div className="h-96">{``}</div>
            </article>

        </>

    )
    
}